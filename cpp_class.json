{
  "../cppast/include/cppast/cpp_class.hpp": {
    "classes": {
      "builder": {
        "bases": [],
        "constructors": [
          {
            "parameters": [
              {
                "default_value": "",
                "name": "name",
                "type": "std::string"
              },
              {
                "default_value": "",
                "name": "kind",
                "type": "cppast::cpp_class_kind"
              },
              {
                "default_value": "false",
                "name": "is_final",
                "type": "bool"
              }
            ]
          }
        ],
        "methods": [
          {
            "name": "is_final",
            "parameters": [],
            "return_type": "void"
          },
          {
            "name": "base_class",
            "parameters": [
              {
                "default_value": "",
                "name": "name",
                "type": "std::string"
              },
              {
                "default_value": "",
                "name": "type",
                "type": "std::unique_ptr<cpp_type>"
              },
              {
                "default_value": "",
                "name": "access",
                "type": "cppast::cpp_access_specifier_kind"
              },
              {
                "default_value": "",
                "name": "is_virtual",
                "type": "bool"
              }
            ],
            "return_type": "cppast::cpp_base_class&"
          },
          {
            "name": "add_base_class",
            "parameters": [
              {
                "default_value": "",
                "name": "base",
                "type": "std::unique_ptr<cpp_base_class>"
              }
            ],
            "return_type": "cppast::cpp_base_class&"
          },
          {
            "name": "access_specifier",
            "parameters": [
              {
                "default_value": "",
                "name": "access",
                "type": "cppast::cpp_access_specifier_kind"
              }
            ],
            "return_type": "void"
          },
          {
            "name": "add_child",
            "parameters": [
              {
                "default_value": "",
                "name": "child",
                "type": "std::unique_ptr<cpp_entity>"
              }
            ],
            "return_type": "void"
          },
          {
            "name": "get",
            "parameters": [],
            "return_type": "cppast::cpp_class&"
          },
          {
            "name": "finish",
            "parameters": [
              {
                "default_value": "",
                "name": "idx",
                "type": "cppast::cpp_entity_index const&"
              },
              {
                "default_value": "",
                "name": "id",
                "type": "cppast::cpp_entity_id"
              },
              {
                "default_value": "",
                "name": "semantic_parent",
                "type": "type_safe::optional<cpp_entity_ref>"
              }
            ],
            "return_type": "std::unique_ptr<cpp_class>"
          },
          {
            "name": "finish_declaration",
            "parameters": [
              {
                "default_value": "",
                "name": "idx",
                "type": "cppast::cpp_entity_index const&"
              },
              {
                "default_value": "",
                "name": "definition_id",
                "type": "cppast::cpp_entity_id"
              }
            ],
            "return_type": "std::unique_ptr<cpp_class>"
          },
          {
            "name": "finish",
            "parameters": [
              {
                "default_value": "",
                "name": "semantic_parent",
                "type": "type_safe::optional<cpp_entity_ref>"
              }
            ],
            "return_type": "std::unique_ptr<cpp_class>"
          },
          {
            "name": "finish_declaration",
            "parameters": [
              {
                "default_value": "",
                "name": "definition_id",
                "type": "cppast::cpp_entity_id"
              }
            ],
            "return_type": "std::unique_ptr<cpp_class>"
          }
        ],
        "scope": "cppast::cpp_class::",
        "variables": []
      },
      "cpp_access_specifier": {
        "bases": [
          "cpp_entity"
        ],
        "constructors": [],
        "methods": [
          {
            "name": "access_specifier",
            "parameters": [],
            "return_type": "cppast::cpp_access_specifier_kind"
          }
        ],
        "scope": "cppast::",
        "variables": []
      },
      "cpp_base_class": {
        "bases": [
          "cpp_entity"
        ],
        "constructors": [],
        "methods": [
          {
            "name": "type",
            "parameters": [],
            "return_type": "cppast::cpp_type const&"
          },
          {
            "name": "access_specifier",
            "parameters": [],
            "return_type": "cppast::cpp_access_specifier_kind"
          },
          {
            "name": "is_virtual",
            "parameters": [],
            "return_type": "bool"
          }
        ],
        "scope": "cppast::",
        "variables": []
      },
      "cpp_class": {
        "bases": [
          "cpp_entity",
          "cpp_entity_container<cpp_class,cpp_entity>",
          "cpp_forward_declarable"
        ],
        "constructors": [],
        "methods": [
          {
            "name": "class_kind",
            "parameters": [],
            "return_type": "cppast::cpp_class_kind"
          },
          {
            "name": "is_final",
            "parameters": [],
            "return_type": "bool"
          },
          {
            "name": "bases",
            "parameters": [],
            "return_type": "detail::iteratable_intrusive_list<cpp_base_class>"
          }
        ],
        "scope": "cppast::",
        "variables": []
      }
    },
    "enums": {
      "cpp_access_specifier_kind": {
        "values": [
          {
            "name": "cpp_public",
            "value": ""
          },
          {
            "name": "cpp_protected",
            "value": ""
          },
          {
            "name": "cpp_private",
            "value": ""
          }
        ]
      },
      "cpp_class_kind": {
        "values": [
          {
            "name": "class_t",
            "value": ""
          },
          {
            "name": "struct_t",
            "value": ""
          },
          {
            "name": "union_t",
            "value": ""
          }
        ]
      }
    },
    "functions": [
      {
        "comment": "\\returns The keyword as a string.",
        "name": "to_string",
        "parameters": [
          {
            "default_value": "",
            "name": "kind",
            "type": "cppast::cpp_class_kind"
          }
        ],
        "return_type": "char const*"
      },
      {
        "comment": "\\returns The access specifier keyword as a string.",
        "name": "to_string",
        "parameters": [
          {
            "default_value": "",
            "name": "access",
            "type": "cppast::cpp_access_specifier_kind"
          }
        ],
        "return_type": "char const*"
      },
      {
        "name": "kind",
        "parameters": [],
        "return_type": "cppast::cpp_entity_kind"
      },
      {
        "comment": "\\returns A newly created access specifier.\n\\notes It is not meant to be registered at the [cppast::cpp_entity_index](),\nas nothing can refer to it.",
        "name": "build",
        "parameters": [
          {
            "default_value": "",
            "name": "kind",
            "type": "cppast::cpp_access_specifier_kind"
          }
        ],
        "return_type": "std::unique_ptr<cpp_access_specifier>"
      },
      {
        "name": "kind",
        "parameters": [],
        "return_type": "cppast::cpp_entity_kind"
      },
      {
        "comment": "\\returns A newly created base class specifier.\n\\notes It is not meant to be registered at the [cppast::cpp_entity_index](),\nas nothing can refer to the specifier itself.",
        "name": "build",
        "parameters": [
          {
            "default_value": "",
            "name": "name",
            "type": "std::string"
          },
          {
            "default_value": "",
            "name": "base",
            "type": "std::unique_ptr<cpp_type>"
          },
          {
            "default_value": "",
            "name": "access",
            "type": "cppast::cpp_access_specifier_kind"
          },
          {
            "default_value": "",
            "name": "is_virtual",
            "type": "bool"
          }
        ],
        "return_type": "std::unique_ptr<cpp_base_class>"
      },
      {
        "name": "kind",
        "parameters": [],
        "return_type": "cppast::cpp_entity_kind"
      },
      {
        "comment": "\\returns The type the base class refers to.\nIt is either a class or some form of typedef.",
        "name": "get_class_or_typedef",
        "parameters": [
          {
            "default_value": "",
            "name": "index",
            "type": "cppast::cpp_entity_index const&"
          },
          {
            "default_value": "",
            "name": "base",
            "type": "cppast::cpp_base_class const&"
          }
        ],
        "return_type": "type_safe::optional_ref<const cpp_entity>"
      },
      {
        "comment": "\\returns The type the base class refers to.\nTypedefs are unwrapped.",
        "name": "get_class",
        "parameters": [
          {
            "default_value": "",
            "name": "index",
            "type": "cppast::cpp_entity_index const&"
          },
          {
            "default_value": "",
            "name": "base",
            "type": "cppast::cpp_base_class const&"
          }
        ],
        "return_type": "type_safe::optional_ref<const cpp_class>"
      }
    ],
    "macros": [
      {
        "name": "CPPAST_CPP_CLASS_HPP_INCLUDED",
        "replacement": ""
      }
    ],
    "type_aliases": {}
  }
}
