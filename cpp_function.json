{
  "../cppast/include/cppast/cpp_function.hpp": {
    "classes": {
      "basic_builder": {
        "constructors": [
          {
            "parameters": [
              {
                "default_value": "",
                "name": "name",
                "type": "std::string"
              }
            ]
          }
        ],
        "methods": [
          {
            "name": "add_parameter",
            "parameters": [
              {
                "default_value": "",
                "name": "parameter",
                "type": "std::unique_ptr<cpp_function_parameter>"
              }
            ],
            "return_type": "void"
          },
          {
            "name": "is_variadic",
            "parameters": [],
            "return_type": "void"
          },
          {
            "name": "noexcept_condition",
            "parameters": [
              {
                "default_value": "",
                "name": "cond",
                "type": "std::unique_ptr<cpp_expression>"
              }
            ],
            "return_type": "void"
          },
          {
            "name": "get",
            "parameters": [],
            "return_type": "T&"
          },
          {
            "name": "finish",
            "parameters": [
              {
                "default_value": "",
                "name": "idx",
                "type": "cppast::cpp_entity_index const&"
              },
              {
                "default_value": "",
                "name": "id",
                "type": "cppast::cpp_entity_id"
              },
              {
                "default_value": "",
                "name": "body_kind",
                "type": "cppast::cpp_function_body_kind"
              },
              {
                "default_value": "",
                "name": "semantic_parent",
                "type": "type_safe::optional<cpp_entity_ref>"
              }
            ],
            "return_type": "std::unique_ptr<T>"
          },
          {
            "name": "finish",
            "parameters": [
              {
                "default_value": "",
                "name": "id",
                "type": "cppast::cpp_entity_id"
              },
              {
                "default_value": "",
                "name": "body_kind",
                "type": "cppast::cpp_function_body_kind"
              },
              {
                "default_value": "",
                "name": "semantic_parent",
                "type": "type_safe::optional<cpp_entity_ref>"
              }
            ],
            "return_type": "std::unique_ptr<T>"
          }
        ]
      },
      "builder": {
        "bases": [
          "cpp_function_base::basic_builder<cpp_function>"
        ],
        "constructors": [
          {
            "parameters": [
              {
                "default_value": "",
                "name": "name",
                "type": "std::string"
              },
              {
                "default_value": "",
                "name": "return_type",
                "type": "std::unique_ptr<cpp_type>"
              }
            ]
          }
        ],
        "methods": [
          {
            "name": "storage_class",
            "parameters": [
              {
                "default_value": "",
                "name": "storage",
                "type": "cppast::cpp_storage_class_specifiers"
              }
            ],
            "return_type": "void"
          },
          {
            "name": "is_constexpr",
            "parameters": [],
            "return_type": "void"
          }
        ],
        "scope": "cppast::cpp_function::",
        "variables": []
      },
      "cpp_function": {
        "bases": [
          "cpp_function_base"
        ],
        "constructors": [],
        "methods": [
          {
            "name": "return_type",
            "parameters": [],
            "return_type": "cppast::cpp_type const&"
          },
          {
            "name": "storage_class",
            "parameters": [],
            "return_type": "cppast::cpp_storage_class_specifiers"
          },
          {
            "name": "is_constexpr",
            "parameters": [],
            "return_type": "bool"
          }
        ],
        "scope": "cppast::",
        "variables": []
      },
      "cpp_function_base": {
        "bases": [
          "cpp_entity",
          "cpp_forward_declarable"
        ],
        "constructors": [],
        "methods": [
          {
            "name": "parameters",
            "parameters": [],
            "return_type": "detail::iteratable_intrusive_list<cpp_function_parameter>"
          },
          {
            "name": "body_kind",
            "parameters": [],
            "return_type": "cppast::cpp_function_body_kind"
          },
          {
            "name": "noexcept_condition",
            "parameters": [],
            "return_type": "type_safe::optional_ref<const cpp_expression>"
          },
          {
            "name": "is_variadic",
            "parameters": [],
            "return_type": "bool"
          },
          {
            "name": "signature",
            "parameters": [],
            "return_type": "std::string"
          }
        ],
        "scope": "cppast::",
        "variables": []
      },
      "cpp_function_parameter": {
        "bases": [
          "cpp_entity",
          "cpp_variable_base"
        ],
        "constructors": [],
        "methods": [],
        "scope": "cppast::",
        "variables": []
      }
    },
    "enums": {
      "cpp_function_body_kind": {
        "values": [
          {
            "name": "cpp_function_declaration",
            "value": ""
          },
          {
            "name": "cpp_function_definition",
            "value": ""
          },
          {
            "name": "cpp_function_defaulted",
            "value": ""
          },
          {
            "name": "cpp_function_deleted",
            "value": ""
          }
        ]
      }
    },
    "functions": [
      {
        "name": "kind",
        "parameters": [],
        "return_type": "cppast::cpp_entity_kind"
      },
      {
        "comment": "\\returns A newly created and registered function parameter.",
        "name": "build",
        "parameters": [
          {
            "default_value": "",
            "name": "idx",
            "type": "cppast::cpp_entity_index const&"
          },
          {
            "default_value": "",
            "name": "id",
            "type": "cppast::cpp_entity_id"
          },
          {
            "default_value": "",
            "name": "name",
            "type": "std::string"
          },
          {
            "default_value": "",
            "name": "type",
            "type": "std::unique_ptr<cpp_type>"
          },
          {
            "default_value": "nullptr",
            "name": "def",
            "type": "std::unique_ptr<cpp_expression>"
          }
        ],
        "return_type": "std::unique_ptr<cpp_function_parameter>"
      },
      {
        "comment": "\\returns A newly created unnamed function parameter.\n\\notes It will not be registered, as nothing can refer to it.",
        "name": "build",
        "parameters": [
          {
            "default_value": "",
            "name": "type",
            "type": "std::unique_ptr<cpp_type>"
          },
          {
            "default_value": "nullptr",
            "name": "def",
            "type": "std::unique_ptr<cpp_expression>"
          }
        ],
        "return_type": "std::unique_ptr<cpp_function_parameter>"
      },
      {
        "comment": "\\returns Whether or not the function body is a declaration,\nwithout a definition.",
        "name": "is_declaration",
        "parameters": [
          {
            "default_value": "",
            "name": "body",
            "type": "cppast::cpp_function_body_kind"
          }
        ],
        "return_type": "bool"
      },
      {
        "comment": "\\returns Whether or not the function body is a definition.",
        "name": "is_definition",
        "parameters": [
          {
            "default_value": "",
            "name": "body",
            "type": "cppast::cpp_function_body_kind"
          }
        ],
        "return_type": "bool"
      },
      {
        "name": "kind",
        "parameters": [],
        "return_type": "cppast::cpp_entity_kind"
      }
    ],
    "macros": [
      {
        "name": "CPPAST_CPP_FUNCTION_HPP_INCLUDED",
        "replacement": ""
      }
    ],
    "type_aliases": {}
  }
}
